name: Release on GitHub & PyPI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: "${{ matrix.build[0] }} ${{ matrix.os }} ${{ matrix.arch }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: [
            "ubuntu-latest",
            # "macos-latest",
          ]
        arch: ["x86_64"]
        build:
          [
            ["cp39-manylinux_x86_64", "python3.9"],
            ["cp310-manylinux_x86_64", "python3.10"],
            ["cp311-manylinux_x86_64", "python3.11"],
          ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Install build dependencies
        run: python3 -m pip install cmeel[build] cibuildwheel
      - name: Set python include directory
        run: echo "PYTHON_INCLUDE_DIR=$(bash scripts/include_dir.sh dockcross/manylinux_2_28-x64 ${{matrix.build[1]}})" >> $GITHUB_ENV
      - run: cibuildwheel --output-dir wh
        env:
          CIBW_BUILD: ${{ matrix.build[0] }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: "dockcross/manylinux_2_28-x64"
          CIBW_REPAIR_WHEEL_COMMAND: ""
          CIBW_ENVIRONMENT: CMEEL_LOG_LEVEL="DEBUG" CMEEL_TEMP_DIR=/tmp/cmeel_out/ CMEEL_CMAKE_ARGS="-DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -DPYTHON_PREFIX=/tmp/cmeel_out/whl/cmeel.prefix/lib/${{matrix.build[1]}}/site-packages/"
          CMEEL_TEMP_DIR: /tmp/cmeel_out/
          CMEEL_CMAKE_ARGS: -DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -DPYTHON_PREFIX=/tmp/cmeel_out/whl/cmeel.prefix/lib/${{matrix.build[1]}}/site-packages/
          PYTHON_INCLUDE_DIR: ${{ env.PYTHON_INCLUDE_DIR }}
      - uses: actions/upload-artifact@v3
        with:
          path: wh

  sdist:
    name: "build sdist"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: setup
        run: |
          python -m pip install -U pip
          python -m pip install build cmeel[build]
      - name: build sdist
        run: python -m build -nso dist .
      - uses: actions/upload-artifact@v3
        with:
          path: dist
  release:
    needs: ["build", "sdist"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - run: python -m pip install twine
      - run: twine upload -u __token__ -p "${{ secrets.PYPI_TOKEN }}" artifact/cmeel_casadi*.whl
      - run: twine upload -u __token__ -p "${{ secrets.PYPI_TOKEN }}" artifact/cmeel_casadi*.tar.gz || true
      - run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - run: gh release create -t "Release ${{ env.TAG}}" -n "$(awk '/## \[${{ env.TAG }}] - /{flag=1;next}/## \[/{flag=0}flag' CHANGELOG.md)" ${{ env.TAG }} artifact/cmeel_casadi*.{whl,tar.gz}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
