name: Release on GitHub & PyPI

on:
  push:
#     tags:
#       - "v*"

jobs:
  build:
    name: "${{ matrix.os }} ${{ matrix.python }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [
            # "python3.9",
            "python3.10",
            # "python3.11",
          ]
        os: ["ubuntu-latest"] #, "macos-latest"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Build docker image
        run: docker build -t test .
      - name: Install build dependencies
        run: python3 -m pip install cmeel[build]
      - name: Set python include directory
        run: echo "PYTHON_INCLUDE_DIR=$(bash scripts/include_dir.sh ${{matrix.python}})" >> $GITHUB_ENV
      - name: Build wheel using cmeel
        run: python3 -m cmeel -vvv docker -i docker.io/library/test -p ${{matrix.python}} -c -e CMEEL_TEMP_DIR=/tmp/cmeel_out/ -e CMEEL_CMAKE_ARGS="${{env.CMEEL_CMAKE_ARGS}}"
        env:
          CMEEL_CMAKE_ARGS: -DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -DPYTHON_PREFIX=/tmp/cmeel_out/whl/cmeel.prefix/lib/${{matrix.python}}/site-packages/
          PYTHON_INCLUDE_DIR: ${{ env.PYTHON_INCLUDE_DIR }}
      - uses: actions/upload-artifact@v3
        with:
          path: wh

  sdist:
    name: "build sdist"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: setup
        run: |
          python -m pip install -U pip
          python -m pip install build cmeel[build]
      - name: build sdist
        run: python -m build -nso dist .
      - uses: actions/upload-artifact@v3
        with:
          path: dist
  # release:
  #   needs: ["build", "sdist"]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v3
  #     - run: pipx install twine
  #     - run: twine upload -u __token__ -p "${{ secrets.PYPI_TOKEN }}" artifact/cmeel_example*.whl
  #     - run: twine upload -u __token__ -p "${{ secrets.PYPI_TOKEN }}" artifact/cmeel_example*.tar.gz || true
  #     - run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
  #     - run: gh release create -t "Release ${{ env.TAG}}" -n "$(awk '/## \[${{ env.TAG }}] - /{flag=1;next}/## \[/{flag=0}flag' CHANGELOG.md)" ${{ env.TAG }} artifact/cmeel_example*.{whl,tar.gz}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
